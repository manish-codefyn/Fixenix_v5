"""
Django settings for FIXENIX project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os  # new
from pathlib import Path
import environ
from django.conf import settings
env = environ.Env()
# reading .env file
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# DEBUG
import socket

hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
INTERNAL_IPS = [ip[:-1] + "1" for ip in ips]
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
# BASE_URL = env("TRUSTED_ORIGIN")

DEBUG = int(env("DEBUG", default=0))
# DEBUG = True
ALLOWED_HOSTS = [env("ALLOW_HOST"),env("ALLOW_IP")]
CSRF_TRUSTED_ORIGINS = [env("TRUSTED_ORIGIN")]

from django.core.management.utils import get_random_secret_key

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-jpjhb)$cjy4k=j#x76x%d90a4)e(1$zs)p!rj7lw#tm_r$-wzd'
SECRET_KEY = get_random_secret_key()
ENVIRONMENT = env("ENVIRONMENT", default="development")
if ENVIRONMENT == "production":
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = "DENY"
    # SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 3600
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
MAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_USE_TLS = True
EMAIL_PORT = 587

EMAIL_USE_SSL = False
ADMIN_EMAIL = "fixenix.com@gmail.com"



EMAIL_TIMEOUT = 60  # Timeout in seconds
# django-debug-toolbar
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    'django.contrib.sites',  # Enable the sites framework
    "django.contrib.staticfiles",
    "cloudinary_storage",
    "cloudinary",
    # Third-party
    "crispy_forms",  # new
    "crispy_bootstrap5",
    "allauth",  # new
    "allauth.account",  # new
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
 
    "captcha",
    "qr_code",
    "debug_toolbar",  # new
    "compressor",  # for static compression
    # OTP For Auth
    "django_otp",
    "django_otp.plugins.otp_totp",
    # local
    "users.apps.UsersConfig",  # new'
    "pages.apps.PagesConfig",  # new'
    "sitesetting.apps.SitesettingConfig",  # new'
    "services.apps.ServicesConfig",  # new'
    "works.apps.WorksConfig",  # new'
    "Invoice.apps.InvoiceConfig",  # new'
    "chatbot.apps.ChatbotConfig",  # new'
    "bookings.apps.BookingsConfig",  # new'
    "employee.apps.EmployeeConfig",  # new'
    "delivery.apps.DeliveryConfig",  # new'
    "dashboard.apps.DashboardConfig",  # new'
    'widget_tweaks',
    'django_celery_beat',

    
]

# cerely

# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Use Redis as the broker
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# cerely
SITE_ID = 1  # Ensure this matches your site's entry in the Django admin
SOCIALACCOUNT_LOGIN_ON_GET = True
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"  # Change to "https" if using SSL
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': env('CLIENT_ID'),
            'secret': env('SECRET_KEY'),
           
        },
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},

    }
}

# 

GOOGLE_MAPS_API_KEY = env('GOOGLE_MAP_API')
SERVICE_CENTER_LAT = 26.747917  # Replace with actual latitude
SERVICE_CENTER_LNG =  88.437392  # Replace with actual longitude

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
# Check session settings (Optional, if relevant)
SESSION_COOKIE_AGE = 3600  # Session expiration time in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Expire session when the browser is closed

# captcha
RECAPTCHA_PUBLIC_KEY = env("RECAPTCHA_PUBLIC_KEY1")
RECAPTCHA_PRIVATE_KEY = env("RECAPTCHA_PRIVATE_KEY1")
RAZORPAY_VENDOR_NAME = env("RAZORPAY_VENDOR_NAME")
RAZORPAY_KEY_ID = env("RAZORPAY_PUBLIC_KEY")
RAZORPAY_SECRET_KEY = env("RAZORPAY_SECRET_KEY")
RAZORPAY_API_KEY = RAZORPAY_KEY_ID
# allauth settings

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",  # new
)


# captcha
CAPTCHA_IMAGE_SIZE = (120, 34)
# CAPTCHA_FOREGROUND_COLOR = "#e43603"

# Caching
CACHE_MIDDLEWARE_ALIAS = "default"
CACHE_MIDDLEWARE_SECONDS = 604800
CACHE_MIDDLEWARE_KEY_PREFIX = ""
# form p[ack]#
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"
# CRISPY_TEMPLATE_PACK = 'bootstrap4' # new
from django.urls import reverse_lazy

LOGIN_URL = reverse_lazy("account_login")

# usermanage
ACCOUNT_USERNAME_REQUIRED = True  # new
ACCOUNT_AUTHENTICATION_METHOD = "email"  # new
ACCOUNT_EMAIL_REQUIRED = True  # new
ACCOUNT_UNIQUE_EMAIL = True  # new
AUTH_USER_MODEL = "users.CustomUser"  # new
LOGIN_REDIRECT_URL = reverse_lazy("index")
LOGOUT_REDIRECT_URL = reverse_lazy("index")  # new
ACCOUNT_ADAPTER = "users.adapter.AccountAdapter"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
# LOGOUT_REDIRECT_URL =  reverse_lazy("index") # new
# ACCOUNT_LOGOUT_REDIRECT = reverse_lazy("index")  # new
ACCOUNT_SESSION_REMEMBER = True  # new
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False  # new
# ACCOUNT_SIGNUP_FORM_CLASS = "users.forms.CustomUserCreationForm"
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
# AUTO LOGOUT
from datetime import timedelta

ACCOUNT_FORMS = {
    "login": "users.forms.CustomLoginForm",
    # Use our custom signup form
    "signup": "users.forms.CustomSignupForm",
}
ACCOUNT_ALLOW_SIGNUPS = False
AUTO_LOGOUT = {
    "IDLE_TIME": timedelta(minutes=30),
    "SESSION_TIME": timedelta(minutes=60),
    "MESSAGE": "The session has expired. Please login again to continue.",
    "REDIRECT_TO_LOGIN_IMMEDIATELY": True,
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # new
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_otp.middleware.OTPMiddleware",
    # Outo Logout
    "django_auto_logout.middleware.auto_logout",
    # Debug
    "debug_toolbar.middleware.DebugToolbarMiddleware",  # new
    # CACHING
    "django.middleware.cache.FetchFromCacheMiddleware",  # new
]


ROOT_URLCONF = "FIXENIX.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],  # new
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # FOR AUTO LOGOUT
                "django_auto_logout.context_processors.auto_logout_client",
            ],
                                    # ! New Line
            "libraries": {
             
                "custom_filters": "templatetags.custom_filters",
              
            },
        },
    },
]
WSGI_APPLICATION = "FIXENIX.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# import pymysql
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': env('CLOUD_NAME'),
    'API_KEY': env('API_KEY'),
    'API_SECRET': env('API_SECRET'),
    'SECURE': True,
    'MEDIA_TAG': 'media',
    'INVALID_VIDEO_ERROR_MESSAGE': 'Please upload a valid video file.',
    'EXCLUDE_DELETE_ORPHANED_MEDIA_PATHS': (),
    'STATIC_TAG': 'static',
    'STATICFILES_MANIFEST_ROOT': os.path.join(BASE_DIR, 'manifest'),
    'STATIC_IMAGES_EXTENSIONS': ['jpg', 'jpe', 'jpeg', 'jpc', 'jp2', 'j2k', 'wdp', 'jxr',
                                 'hdp', 'png', 'gif', 'webp', 'bmp', 'tif', 'tiff', 'ico'],
    'STATIC_VIDEOS_EXTENSIONS': ['mp4', 'webm', 'flv', 'mov', 'ogv' ,'3gp' ,'3g2' ,'wmv' ,
                                 'mpeg' ,'flv' ,'mkv' ,'avi'],
    'MAGIC_FILE_PATH': 'magic',
    'PREFIX': settings.MEDIA_URL
}


STORAGES = {
    "default": {
        "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# STORAGES = {
#      "default": {
#         "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage",
#     },
#     # "default": {
#     #     "BACKEND": "django_webdav_storage.storage.WebDavStorage",
#     # },
#     # "default": {
#     #     "BACKEND": "django.core.files.storage.FileSystemStorage",
#     # },
# #   "staticfiles": {
# #         "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
# #     },
# }
# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/4.1/howto/static-files/
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STATIC_URL = "static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static/"),
    os.path.join(BASE_DIR, "media"),
]  # new
# STATIC_ROOT = "/home/uzmylats/public_html/fixenix.com/static"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # new
# mdeidia setting
MEDIA_URL = "https://res.cloudinary.com/dcyzddb66/"
# MEDIA_URL = "/media/"  # new
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # new
# MEDIA_ROOT = '/home/uzmylats/public_html/fixenix.com/media' 


STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    # for comression
    "compressor.finders.CompressorFinder",
]
# pymysql.install_as_MySQLdb()
DATABASES = {
    "default": {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        "ENGINE": env("ENGINE"),  # <-- UPDATED line
        "NAME": env("DATABASE_NAME"),
        "USER": env("DATABASE_USER"),
        "PASSWORD":env("DATABASE_PASS"),
        "HOST": env("DATABASE_HOST"),
        "PORT": env("DATABASE_PORT"),
       
    }
}
# DJANGO URL
import dj_database_url

db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES["default"].update(db_from_env)
# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

# TIME_ZONE = "UTC"
TIME_ZONE = "Asia/Dubai"

USE_I18N = True

USE_TZ = True



# compresion data



COMPRESS_ENABLED = True
COMPRESS_CSS_FILTERS = ["compressor.filters.cssmin.CSSMinFilter"]
COMPRESS_JS_FILTERS = ["compressor.filters.jsmin.JSMinFilter"]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
